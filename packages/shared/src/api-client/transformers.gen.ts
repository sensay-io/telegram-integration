// This file is auto-generated by @hey-api/openapi-ts

import type { GetV1ReplicasResponse, GetV1ReplicasByReplicaUuidChatHistoryResponse, GetV1ReplicasByReplicaUuidChatHistoryTelegramResponse, GetV1ReplicasByReplicaUuidChatHistoryDiscordResponse, GetV1ReplicasByReplicaUuidChatHistoryWebResponse, GetV1ReplicasByReplicaUuidChatHistoryEmbedResponse, GetV1ReplicasByReplicaUuidConversationsByConversationUuidResponse, GetV1ReplicasByReplicaUuidConversationsResponse, GetV1ReplicasByReplicaUuidConversationsByConversationUuidMentionsResponse, GetV1ReplicasByReplicaUuidConversationsByConversationUuidMessagesResponse, GetV1ReplicasByReplicaUuidAnalyticsConversationsHistoricalResponse, GetV1TrainingByTrainingIdResponse, GetV1TrainingResponse } from './types.gen';

export const getV1ReplicasResponseTransformer = async (data: any): Promise<GetV1ReplicasResponse> => {
    data.items = data.items.map((item: any) => {
        if (item.created_at) {
            item.created_at = new Date(item.created_at);
        }
        return item;
    });
    return data;
};

export const getV1ReplicasByReplicaUuidChatHistoryResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidChatHistoryResponse> => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            item.created_at = new Date(item.created_at);
            item.sources = item.sources.map((item: any) => {
                item.created_at = new Date(item.created_at);
                return item;
            });
            return item;
        });
    }
    return data;
};

export const getV1ReplicasByReplicaUuidChatHistoryTelegramResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidChatHistoryTelegramResponse> => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            item.created_at = new Date(item.created_at);
            item.sources = item.sources.map((item: any) => {
                item.created_at = new Date(item.created_at);
                return item;
            });
            return item;
        });
    }
    return data;
};

export const getV1ReplicasByReplicaUuidChatHistoryDiscordResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidChatHistoryDiscordResponse> => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            item.created_at = new Date(item.created_at);
            item.sources = item.sources.map((item: any) => {
                item.created_at = new Date(item.created_at);
                return item;
            });
            return item;
        });
    }
    return data;
};

export const getV1ReplicasByReplicaUuidChatHistoryWebResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidChatHistoryWebResponse> => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            item.created_at = new Date(item.created_at);
            item.sources = item.sources.map((item: any) => {
                item.created_at = new Date(item.created_at);
                return item;
            });
            return item;
        });
    }
    return data;
};

export const getV1ReplicasByReplicaUuidChatHistoryEmbedResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidChatHistoryEmbedResponse> => {
    if (data.items) {
        data.items = data.items.map((item: any) => {
            item.created_at = new Date(item.created_at);
            item.sources = item.sources.map((item: any) => {
                item.created_at = new Date(item.created_at);
                return item;
            });
            return item;
        });
    }
    return data;
};

export const getV1ReplicasByReplicaUuidConversationsByConversationUuidResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidConversationsByConversationUuidResponse> => {
    if (data.firstMessageAt) {
        data.firstMessageAt = new Date(data.firstMessageAt);
    }
    if (data.lastMessageAt) {
        data.lastMessageAt = new Date(data.lastMessageAt);
    }
    if (data.lastReplicaReplyAt) {
        data.lastReplicaReplyAt = new Date(data.lastReplicaReplyAt);
    }
    return data;
};

export const getV1ReplicasByReplicaUuidConversationsResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidConversationsResponse> => {
    data.items = data.items.map((item: any) => {
        if (item.firstMessageAt) {
            item.firstMessageAt = new Date(item.firstMessageAt);
        }
        if (item.lastMessageAt) {
            item.lastMessageAt = new Date(item.lastMessageAt);
        }
        if (item.lastReplicaReplyAt) {
            item.lastReplicaReplyAt = new Date(item.lastReplicaReplyAt);
        }
        return item;
    });
    return data;
};

export const getV1ReplicasByReplicaUuidConversationsByConversationUuidMentionsResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidConversationsByConversationUuidMentionsResponse> => {
    data.items = data.items.map((item: any) => {
        item.messages = item.messages.map((item: any) => {
            item.createdAt = new Date(item.createdAt);
            return item;
        });
        return item;
    });
    return data;
};

export const getV1ReplicasByReplicaUuidConversationsByConversationUuidMessagesResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidConversationsByConversationUuidMessagesResponse> => {
    data.items = data.items.map((item: any) => {
        item.createdAt = new Date(item.createdAt);
        return item;
    });
    return data;
};

export const getV1ReplicasByReplicaUuidAnalyticsConversationsHistoricalResponseTransformer = async (data: any): Promise<GetV1ReplicasByReplicaUuidAnalyticsConversationsHistoricalResponse> => {
    data.items = data.items.map((item: any) => {
        item.date = new Date(item.date);
        return item;
    });
    return data;
};

export const getV1TrainingByTrainingIdResponseTransformer = async (data: any): Promise<GetV1TrainingByTrainingIdResponse> => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const getV1TrainingResponseTransformer = async (data: any): Promise<GetV1TrainingResponse> => {
    data.items = data.items.map((item: any) => {
        item.created_at = new Date(item.created_at);
        item.updated_at = new Date(item.updated_at);
        return item;
    });
    return data;
};