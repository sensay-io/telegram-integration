// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PutV1ReplicasByReplicaUuidTrainingByTrainingIdData, PutV1ReplicasByReplicaUuidTrainingByTrainingIdResponse, PutV1ReplicasByReplicaUuidTrainingByTrainingIdError, GetV1ReplicasData, GetV1ReplicasResponse, GetV1ReplicasError, PostV1ReplicasData, PostV1ReplicasResponse, PostV1ReplicasError, PostV1ApiKeysInvitesByCodeRedeemData, PostV1ApiKeysInvitesByCodeRedeemResponse, PostV1ApiKeysInvitesByCodeRedeemError, GetV1TrainingData, GetV1TrainingResponse, GetV1TrainingError, DeleteV1TrainingByTrainingIdData, DeleteV1TrainingByTrainingIdResponse, DeleteV1TrainingByTrainingIdError, GetV1TrainingByTrainingIdData, GetV1TrainingByTrainingIdResponse, GetV1TrainingByTrainingIdError, GetV1ReplicasByReplicaUuidChatHistoryData, GetV1ReplicasByReplicaUuidChatHistoryResponse, GetV1ReplicasByReplicaUuidChatHistoryError, PostV1ReplicasByReplicaUuidChatHistoryData, PostV1ReplicasByReplicaUuidChatHistoryResponse, GetV1ReplicasByReplicaUuidChatHistoryTelegramData, GetV1ReplicasByReplicaUuidChatHistoryTelegramResponse, GetV1ReplicasByReplicaUuidChatHistoryTelegramError, PostV1ReplicasByReplicaUuidChatHistoryTelegramData, PostV1ReplicasByReplicaUuidChatHistoryTelegramResponse, GetV1ReplicasByReplicaUuidChatHistoryDiscordData, GetV1ReplicasByReplicaUuidChatHistoryDiscordResponse, GetV1ReplicasByReplicaUuidChatHistoryDiscordError, GetV1ReplicasByReplicaUuidChatHistoryWebData, GetV1ReplicasByReplicaUuidChatHistoryWebResponse, GetV1ReplicasByReplicaUuidChatHistoryWebError, GetV1ReplicasByReplicaUuidChatHistoryEmbedData, GetV1ReplicasByReplicaUuidChatHistoryEmbedResponse, GetV1ReplicasByReplicaUuidChatHistoryEmbedError, PostV1ReplicasByReplicaUuidChatCompletionsData, PostV1ReplicasByReplicaUuidChatCompletionsResponse, PostV1ReplicasByReplicaUuidChatCompletionsError, PostV1ReplicasByReplicaUuidChatCompletionsTelegramData, PostV1ReplicasByReplicaUuidChatCompletionsTelegramResponse, PostV1ReplicasByReplicaUuidChatCompletionsTelegramError, PostV1ExperimentalReplicasByReplicaUuidChatCompletionsData, PostV1ExperimentalReplicasByReplicaUuidChatCompletionsResponse, PostV1ExperimentalReplicasByReplicaUuidChatCompletionsError, DeleteV1UsersMeData, DeleteV1UsersMeResponse, DeleteV1UsersMeError, GetV1UsersMeData, GetV1UsersMeResponse, PutV1UsersMeData, PutV1UsersMeResponse, PutV1UsersMeError, PostV1UsersData, PostV1UsersResponse, PostV1UsersError, GetV1UsersByUserIdData, GetV1UsersByUserIdResponse, GetV1UsersByUserIdError, GetV1ReplicasByReplicaUuidTrainingFilesUploadData, GetV1ReplicasByReplicaUuidTrainingFilesUploadResponse, GetV1ReplicasByReplicaUuidTrainingFilesUploadError, DeleteV1ReplicasByReplicaUuidIntegrationsTelegramData, DeleteV1ReplicasByReplicaUuidIntegrationsTelegramResponse, DeleteV1ReplicasByReplicaUuidIntegrationsTelegramError, PostV1ReplicasByReplicaUuidIntegrationsTelegramData, PostV1ReplicasByReplicaUuidIntegrationsTelegramResponse, PostV1ReplicasByReplicaUuidIntegrationsTelegramError, DeleteV1ReplicasByReplicaUuidData, DeleteV1ReplicasByReplicaUuidResponse, DeleteV1ReplicasByReplicaUuidError, GetV1ReplicasByReplicaUuidData, GetV1ReplicasByReplicaUuidResponse, GetV1ReplicasByReplicaUuidError, PutV1ReplicasByReplicaUuidData, PutV1ReplicasByReplicaUuidResponse, PutV1ReplicasByReplicaUuidError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Update knowledge base entry
 * Updates the knowledge base entry with new fields
 */
export const putV1ReplicasByReplicaUuidTrainingByTrainingId = <ThrowOnError extends boolean = false>(options: Options<PutV1ReplicasByReplicaUuidTrainingByTrainingIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV1ReplicasByReplicaUuidTrainingByTrainingIdResponse, PutV1ReplicasByReplicaUuidTrainingByTrainingIdError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/training/{trainingID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List replicas
 * List replicas with pagination with optional filtering. Only Replicas that are public or belong to the authenticated user are returned.
 */
export const getV1Replicas = <ThrowOnError extends boolean = false>(options?: Options<GetV1ReplicasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1ReplicasResponse, GetV1ReplicasError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas',
        ...options
    });
};

/**
 * Create a replica
 * Creates a new replica.
 */
export const postV1Replicas = <ThrowOnError extends boolean = false>(options?: Options<PostV1ReplicasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV1ReplicasResponse, PostV1ReplicasError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Redeem an API key invitation
 *
 * If you have an invitation code, you can redeem it to create an Organization and an API key associated with it.
 *
 */
export const postV1ApiKeysInvitesByCodeRedeem = <ThrowOnError extends boolean = false>(options: Options<PostV1ApiKeysInvitesByCodeRedeemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ApiKeysInvitesByCodeRedeemResponse, PostV1ApiKeysInvitesByCodeRedeemError, ThrowOnError>({
        url: '/v1/api-keys/invites/{code}/redeem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all knowledge base entires
 * Returns a list of all knowledge base entires belonging to the organization.
 */
export const getV1Training = <ThrowOnError extends boolean = false>(options?: Options<GetV1TrainingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1TrainingResponse, GetV1TrainingError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/training',
        ...options
    });
};

/**
 * Delete knowledge base entry by ID
 * Deletes a specific knowledge base entry and its associated vector database entry.
 */
export const deleteV1TrainingByTrainingId = <ThrowOnError extends boolean = false>(options: Options<DeleteV1TrainingByTrainingIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV1TrainingByTrainingIdResponse, DeleteV1TrainingByTrainingIdError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/training/{trainingID}',
        ...options
    });
};

/**
 * Get knowledge base entry by ID
 * Returns information about a specific knowledge base entry.
 */
export const getV1TrainingByTrainingId = <ThrowOnError extends boolean = false>(options: Options<GetV1TrainingByTrainingIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1TrainingByTrainingIdResponse, GetV1TrainingByTrainingIdError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/training/{trainingID}',
        ...options
    });
};

/**
 * Get chat history
 * List chat history items of a Replica belonging to the logged in user.
 */
export const getV1ReplicasByReplicaUuidChatHistory = <ThrowOnError extends boolean = false>(options: Options<GetV1ReplicasByReplicaUuidChatHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidChatHistoryResponse, GetV1ReplicasByReplicaUuidChatHistoryError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history',
        ...options
    });
};

/**
 * Create a chat history entry
 * Save chat history items of a Replica belonging to the logged in user.
 */
export const postV1ReplicasByReplicaUuidChatHistory = <ThrowOnError extends boolean = false>(options: Options<PostV1ReplicasByReplicaUuidChatHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ReplicasByReplicaUuidChatHistoryResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Telegram chat history
 * List telegram chat history items of a Replica belonging to the logged in user.
 */
export const getV1ReplicasByReplicaUuidChatHistoryTelegram = <ThrowOnError extends boolean = false>(options: Options<GetV1ReplicasByReplicaUuidChatHistoryTelegramData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidChatHistoryTelegramResponse, GetV1ReplicasByReplicaUuidChatHistoryTelegramError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history/telegram',
        ...options
    });
};

/**
 * Create a Telegram chat history entry
 * Save chat history items of a Replica belonging to the logged in user.
 */
export const postV1ReplicasByReplicaUuidChatHistoryTelegram = <ThrowOnError extends boolean = false>(options: Options<PostV1ReplicasByReplicaUuidChatHistoryTelegramData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ReplicasByReplicaUuidChatHistoryTelegramResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history/telegram',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Discord chat history
 * List discord chat history items of a Replica belonging to the logged in user.
 */
export const getV1ReplicasByReplicaUuidChatHistoryDiscord = <ThrowOnError extends boolean = false>(options: Options<GetV1ReplicasByReplicaUuidChatHistoryDiscordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidChatHistoryDiscordResponse, GetV1ReplicasByReplicaUuidChatHistoryDiscordError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history/discord',
        ...options
    });
};

/**
 * Get Web chat history
 * List web chat history items of a Replica belonging to the logged in user.
 */
export const getV1ReplicasByReplicaUuidChatHistoryWeb = <ThrowOnError extends boolean = false>(options: Options<GetV1ReplicasByReplicaUuidChatHistoryWebData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidChatHistoryWebResponse, GetV1ReplicasByReplicaUuidChatHistoryWebError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history/web',
        ...options
    });
};

/**
 * Get Embed chat history
 * List embed chat history items of a Replica belonging to the logged in user.
 */
export const getV1ReplicasByReplicaUuidChatHistoryEmbed = <ThrowOnError extends boolean = false>(options: Options<GetV1ReplicasByReplicaUuidChatHistoryEmbedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidChatHistoryEmbedResponse, GetV1ReplicasByReplicaUuidChatHistoryEmbedError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/history/embed',
        ...options
    });
};

/**
 * Generate a completion
 *
 * Ask for a completion and stores the prompt in the chat history.
 *
 * Replica chat supports two response formats: streamed and JSON. To switch between these formats, use the 'Accept' header, specifying either 'text/event-stream' for streaming or 'application/json' for JSON.
 * The streamed response honours the [Stream Protocol](https://sdk.vercel.ai/docs/ai-sdk-ui/stream-protocol), allowing the use of a number of SDKs, including [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction).
 *
 * The streamed variant is not specified in the OpenAPI Schema because it is not an OpenAPI endpoint.
 *
 */
export const postV1ReplicasByReplicaUuidChatCompletions = <ThrowOnError extends boolean = false>(options: Options<PostV1ReplicasByReplicaUuidChatCompletionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ReplicasByReplicaUuidChatCompletionsResponse, PostV1ReplicasByReplicaUuidChatCompletionsError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate a Telegram completion
 *
 * Ask for a completion and stores the prompt in the chat history.
 *
 * Replica chat supports two response formats: streamed and JSON. To switch between these formats, use the 'Accept' header, specifying either 'text/event-stream' for streaming or 'application/json' for JSON.
 * The streamed response honours the [Stream Protocol](https://sdk.vercel.ai/docs/ai-sdk-ui/stream-protocol), allowing the use of a number of SDKs, including [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction).
 *
 * The streamed variant is not specified in the OpenAPI Schema because it is not an OpenAPI endpoint.
 *
 */
export const postV1ReplicasByReplicaUuidChatCompletionsTelegram = <ThrowOnError extends boolean = false>(options: Options<PostV1ReplicasByReplicaUuidChatCompletionsTelegramData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ReplicasByReplicaUuidChatCompletionsTelegramResponse, PostV1ReplicasByReplicaUuidChatCompletionsTelegramError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/chat/completions/telegram',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate a completion (OpenAI-compatible, non-streaming)
 *
 * > warn
 * > Limited [OpenAI Chat Completions API](https://platform.openai.com/docs/api-reference/chat/create) compatibility.
 * > Supports basic chat completion with standard message roles and JSON responses.
 * > Not supported: OpenAI-style streaming, tool calls, stop sequences, logprobs, and most request parameters.
 *
 * Creates a chat completion response from a list of messages comprising a conversation.
 *
 */
export const postV1ExperimentalReplicasByReplicaUuidChatCompletions = <ThrowOnError extends boolean = false>(options: Options<PostV1ExperimentalReplicasByReplicaUuidChatCompletionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ExperimentalReplicasByReplicaUuidChatCompletionsResponse, PostV1ExperimentalReplicasByReplicaUuidChatCompletionsError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            }
        ],
        url: '/v1/experimental/replicas/{replicaUUID}/chat/completions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete the current user
 * This endpoint permanently deletes the currently authenticated user account, including all associated data. After deletion, the account cannot be recovered.
 */
export const deleteV1UsersMe = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1UsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteV1UsersMeResponse, DeleteV1UsersMeError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            }
        ],
        url: '/v1/users/me',
        ...options
    });
};

/**
 * Get the current user
 * Returns information about the current user.
 */
export const getV1UsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetV1UsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1UsersMeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            }
        ],
        url: '/v1/users/me',
        ...options
    });
};

/**
 * Update the current user
 * Update the currently logged in user.
 */
export const putV1UsersMe = <ThrowOnError extends boolean = false>(options?: Options<PutV1UsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutV1UsersMeResponse, PutV1UsersMeError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            }
        ],
        url: '/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a user
 * Creates a new user.
 */
export const postV1Users = <ThrowOnError extends boolean = false>(options?: Options<PostV1UsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV1UsersResponse, PostV1UsersError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a user by ID
 * Returns information about the user with the specified ID.
 */
export const getV1UsersByUserId = <ThrowOnError extends boolean = false>(options: Options<GetV1UsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1UsersByUserIdResponse, GetV1UsersByUserIdError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/users/{userID}',
        ...options
    });
};

/**
 * Get signed URL for file upload
 * Creates a signed URL for uploading a file.
 */
export const getV1ReplicasByReplicaUuidTrainingFilesUpload = <ThrowOnError extends boolean = false>(options: Options<GetV1ReplicasByReplicaUuidTrainingFilesUploadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidTrainingFilesUploadResponse, GetV1ReplicasByReplicaUuidTrainingFilesUploadError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/training/files/upload',
        ...options
    });
};

/**
 * Delete a replica Telegram integration
 * Removes a replica Telegram integration.
 */
export const deleteV1ReplicasByReplicaUuidIntegrationsTelegram = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1ReplicasByReplicaUuidIntegrationsTelegramData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteV1ReplicasByReplicaUuidIntegrationsTelegramResponse, DeleteV1ReplicasByReplicaUuidIntegrationsTelegramError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/integrations/telegram',
        ...options
    });
};

/**
 * Create a replica Telegram integration
 * Integrates a replica to Telegram.
 */
export const postV1ReplicasByReplicaUuidIntegrationsTelegram = <ThrowOnError extends boolean = false>(options?: Options<PostV1ReplicasByReplicaUuidIntegrationsTelegramData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV1ReplicasByReplicaUuidIntegrationsTelegramResponse, PostV1ReplicasByReplicaUuidIntegrationsTelegramError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID',
                type: 'apiKey'
            },
            {
                name: 'X-USER-ID-TYPE',
                type: 'apiKey'
            },
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}/integrations/telegram',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a replica
 * Deletes a replica by UUID.
 */
export const deleteV1ReplicasByReplicaUuid = <ThrowOnError extends boolean = false>(options?: Options<DeleteV1ReplicasByReplicaUuidData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteV1ReplicasByReplicaUuidResponse, DeleteV1ReplicasByReplicaUuidError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}',
        ...options
    });
};

/**
 * Get a replica
 * Get an existing replica.
 */
export const getV1ReplicasByReplicaUuid = <ThrowOnError extends boolean = false>(options?: Options<GetV1ReplicasByReplicaUuidData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV1ReplicasByReplicaUuidResponse, GetV1ReplicasByReplicaUuidError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}',
        ...options
    });
};

/**
 * Updates a replica
 * Updates an existing replica.
 */
export const putV1ReplicasByReplicaUuid = <ThrowOnError extends boolean = false>(options?: Options<PutV1ReplicasByReplicaUuidData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutV1ReplicasByReplicaUuidResponse, PutV1ReplicasByReplicaUuidError, ThrowOnError>({
        security: [
            {
                name: 'X-ORGANIZATION-SECRET',
                type: 'apiKey'
            }
        ],
        url: '/v1/replicas/{replicaUUID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};